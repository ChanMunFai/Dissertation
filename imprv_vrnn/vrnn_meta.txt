===========================================================================
Layer (type:depth-idx)                             Param #
===========================================================================
Model                                              --
├─ModuleList: 1-1                                  --
│    └─Sequential: 2-1                             --
│    │    └─Conv2d: 3-1                            128
│    │    └─ResnetBlock: 3-2                       74,048
│    └─Sequential: 2-2                             --
│    │    └─MaxPool2d: 3-3                         --
│    │    └─ResnetBlock: 3-4                       119,232
│    │    └─ResnetBlock: 3-5                       295,552
│    └─Sequential: 2-3                             --
│    │    └─MaxPool2d: 3-6                         --
│    │    └─ResnetBlock: 3-7                       476,032
│    │    └─ResnetBlock: 3-8                       1,180,928
│    └─Sequential: 2-4                             --
│    │    └─MaxPool2d: 3-9                         --
│    │    └─ResnetBlock: 3-10                      1,902,336
│    │    └─ResnetBlock: 3-11                      4,721,152
│    └─Sequential: 2-5                             --
│    │    └─MaxPool2d: 3-12                        --
│    │    └─ResnetBlock: 3-13                      4,721,152
│    │    └─ResnetBlock: 3-14                      4,721,152
│    └─Sequential: 2-6                             --
│    │    └─MaxPool2d: 3-15                        --
│    │    └─ResnetBlock: 3-16                      4,721,152
│    │    └─ResnetBlock: 3-17                      4,721,152
├─ModuleList: 1-2                                  --
│    └─ModuleList: 2-7                             --
│    │    └─ConvLSTM: 3-18                         19,072,000
│    │    └─DcUpConv: 3-19                         4,195,840
│    └─ModuleList: 2-8                             --
│    │    └─ConvLSTM: 3-20                         18,887,680
│    │    └─DcUpConv: 3-21                         4,195,840
│    └─ModuleList: 2-9                             --
│    │    └─ConvLSTM: 3-22                         18,887,680
│    │    └─DcUpConv: 3-23                         2,097,920
│    └─ModuleList: 2-10                            --
│    │    └─ConvLSTM: 3-24                         4,725,248
│    │    └─DcUpConv: 3-25                         524,672
│    └─ModuleList: 2-11                            --
│    │    └─ConvLSTM: 3-26                         1,182,976
│    │    └─DcUpConv: 3-27                         131,264
│    └─ModuleList: 2-12                            --
│    │    └─ConvLSTM: 3-28                         296,576
│    │    └─DcConv: 3-29                           37,056
│    │    └─TemporalConv2d: 3-30                   577
├─ModuleList: 1-3                                  --
│    └─Sequential: 2-13                            --
│    │    └─DcConv: 3-31                           26,229,760
│    │    └─TemporalConv2d: 3-32                   5,243,904
│    │    └─TemporalNorm2d: 3-33                   2,048
│    └─Sequential: 2-14                            --
│    │    └─DcConv: 3-34                           26,229,760
│    │    └─TemporalConv2d: 3-35                   5,243,904
│    │    └─TemporalNorm2d: 3-36                   2,048
│    └─Sequential: 2-15                            --
│    │    └─DcConv: 3-37                           26,229,760
│    │    └─TemporalConv2d: 3-38                   5,243,904
│    │    └─TemporalNorm2d: 3-39                   2,048
│    └─Sequential: 2-16                            --
│    │    └─DcConv: 3-40                           6,561,280
│    │    └─TemporalConv2d: 3-41                   1,311,232
│    │    └─TemporalNorm2d: 3-42                   1,024
│    └─Sequential: 2-17                            --
│    │    └─DcConv: 3-43                           1,642,240
│    │    └─TemporalConv2d: 3-44                   327,936
│    │    └─TemporalNorm2d: 3-45                   512
│    └─Sequential: 2-18                            --
│    │    └─DcConv: 3-46                           411,520
│    │    └─TemporalConv2d: 3-47                   82,048
│    │    └─TemporalNorm2d: 3-48                   256
├─ModuleList: 1-4                                  --
│    └─ModuleList: 2-19                            --
│    │    └─TemporalConv2d: 3-49                   262,656
│    │    └─TemporalNorm2d: 3-50                   1,024
│    │    └─ConvLSTM: 3-51                         18,887,680
│    │    └─TemporalConv2d: 3-52                   10,260
│    │    └─TemporalNorm2d: 3-53                   40
├─ModuleList: 1-5                                  --
│    └─ModuleList: 2-20                            --
│    │    └─TemporalConv2d: 3-54                   262,656
│    │    └─TemporalNorm2d: 3-55                   1,024
│    │    └─ConvLSTM: 3-56                         18,887,680
│    │    └─TemporalConv2d: 3-57                   10,260
│    │    └─TemporalNorm2d: 3-58                   40
├─ModuleList: 1-6                                  --
│    └─Sequential: 2-21                            --
│    │    └─DcConv: 3-59                           26,229,760
│    │    └─TemporalConv2d: 3-60                   5,243,904
│    │    └─TemporalNorm2d: 3-61                   2,048
├─ModuleList: 1-7                                  --
│    └─Sequential: 2-22                            --
│    │    └─DcConv: 3-62                           26,229,760
│    │    └─TemporalConv2d: 3-63                   5,243,904
│    │    └─TemporalNorm2d: 3-64                   2,048
===========================================================================
Total params: 307,929,273
Trainable params: 307,929,273
Non-trainable params: 0
===========================================================================

Model(
  (emb_net): ModuleList(
    (0): Sequential(
      (0): Conv2d(1, 64, kernel_size=(1, 1), stride=(1, 1))
      (1): ResnetBlock(
        (actvn): LeakyReLU(negative_slope=0.2)
        (conv_0): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): GroupNorm(4, 64, eps=1e-05, affine=True)
        )
        (conv_1): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): GroupNorm(4, 64, eps=1e-05, affine=True)
        )
      )
    )
    (1): Sequential(
      (0): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (1): ResnetBlock(
        (actvn): LeakyReLU(negative_slope=0.2)
        (conv_0): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): GroupNorm(4, 64, eps=1e-05, affine=True)
        )
        (conv_1): Sequential(
          (0): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): GroupNorm(4, 128, eps=1e-05, affine=True)
        )
        (conv_s): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (2): ResnetBlock(
        (actvn): LeakyReLU(negative_slope=0.2)
        (conv_0): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): GroupNorm(4, 128, eps=1e-05, affine=True)
        )
        (conv_1): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): GroupNorm(4, 128, eps=1e-05, affine=True)
        )
      )
    )
    (2): Sequential(
      (0): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (1): ResnetBlock(
        (actvn): LeakyReLU(negative_slope=0.2)
        (conv_0): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): GroupNorm(4, 128, eps=1e-05, affine=True)
        )
        (conv_1): Sequential(
          (0): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): GroupNorm(4, 256, eps=1e-05, affine=True)
        )
        (conv_s): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (2): ResnetBlock(
        (actvn): LeakyReLU(negative_slope=0.2)
        (conv_0): Sequential(
          (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): GroupNorm(4, 256, eps=1e-05, affine=True)
        )
        (conv_1): Sequential(
          (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): GroupNorm(4, 256, eps=1e-05, affine=True)
        )
      )
    )
    (3): Sequential(
      (0): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (1): ResnetBlock(
        (actvn): LeakyReLU(negative_slope=0.2)
        (conv_0): Sequential(
          (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): GroupNorm(4, 256, eps=1e-05, affine=True)
        )
        (conv_1): Sequential(
          (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): GroupNorm(4, 512, eps=1e-05, affine=True)
        )
        (conv_s): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (2): ResnetBlock(
        (actvn): LeakyReLU(negative_slope=0.2)
        (conv_0): Sequential(
          (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): GroupNorm(4, 512, eps=1e-05, affine=True)
        )
        (conv_1): Sequential(
          (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): GroupNorm(4, 512, eps=1e-05, affine=True)
        )
      )
    )
    (4): Sequential(
      (0): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (1): ResnetBlock(
        (actvn): LeakyReLU(negative_slope=0.2)
        (conv_0): Sequential(
          (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): GroupNorm(4, 512, eps=1e-05, affine=True)
        )
        (conv_1): Sequential(
          (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): GroupNorm(4, 512, eps=1e-05, affine=True)
        )
      )
      (2): ResnetBlock(
        (actvn): LeakyReLU(negative_slope=0.2)
        (conv_0): Sequential(
          (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): GroupNorm(4, 512, eps=1e-05, affine=True)
        )
        (conv_1): Sequential(
          (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): GroupNorm(4, 512, eps=1e-05, affine=True)
        )
      )
    )
    (5): Sequential(
      (0): MaxPool2d(kernel_size=4, stride=1, padding=0, dilation=1, ceil_mode=False)
      (1): ResnetBlock(
        (actvn): LeakyReLU(negative_slope=0.2)
        (conv_0): Sequential(
          (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): GroupNorm(4, 512, eps=1e-05, affine=True)
        )
        (conv_1): Sequential(
          (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): GroupNorm(4, 512, eps=1e-05, affine=True)
        )
      )
      (2): ResnetBlock(
        (actvn): LeakyReLU(negative_slope=0.2)
        (conv_0): Sequential(
          (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): GroupNorm(4, 512, eps=1e-05, affine=True)
        )
        (conv_1): Sequential(
          (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): GroupNorm(4, 512, eps=1e-05, affine=True)
        )
      )
    )
  )
  (render_nets): ModuleList(
    (0): ModuleList(
      (0): ConvLSTM(
        (model): NormConvLSTMCell(
          (ih_gates): Sequential(
            (0): Conv2d(522, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): GroupNorm(16, 2048, eps=1e-05, affine=True)
          )
          (hh_gates): Sequential(
            (0): Conv2d(512, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): GroupNorm(16, 2048, eps=1e-05, affine=True)
          )
          (c_norm): GroupNorm(16, 512, eps=1e-05, affine=True)
        )
      )
      (1): DcUpConv(
        (main): Sequential(
          (0): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(1, 1))
          (1): GroupNorm(4, 512, eps=1e-05, affine=True)
          (2): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
    (1): ModuleList(
      (0): ConvLSTM(
        (model): NormConvLSTMCell(
          (ih_gates): Sequential(
            (0): Conv2d(512, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): GroupNorm(16, 2048, eps=1e-05, affine=True)
          )
          (hh_gates): Sequential(
            (0): Conv2d(512, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): GroupNorm(16, 2048, eps=1e-05, affine=True)
          )
          (c_norm): GroupNorm(16, 512, eps=1e-05, affine=True)
        )
      )
      (1): DcUpConv(
        (main): Sequential(
          (0): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
          (1): GroupNorm(4, 512, eps=1e-05, affine=True)
          (2): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
    (2): ModuleList(
      (0): ConvLSTM(
        (model): NormConvLSTMCell(
          (ih_gates): Sequential(
            (0): Conv2d(512, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): GroupNorm(16, 2048, eps=1e-05, affine=True)
          )
          (hh_gates): Sequential(
            (0): Conv2d(512, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): GroupNorm(16, 2048, eps=1e-05, affine=True)
          )
          (c_norm): GroupNorm(16, 512, eps=1e-05, affine=True)
        )
      )
      (1): DcUpConv(
        (main): Sequential(
          (0): ConvTranspose2d(512, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
          (1): GroupNorm(4, 256, eps=1e-05, affine=True)
          (2): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
    (3): ModuleList(
      (0): ConvLSTM(
        (model): NormConvLSTMCell(
          (ih_gates): Sequential(
            (0): Conv2d(256, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): GroupNorm(16, 1024, eps=1e-05, affine=True)
          )
          (hh_gates): Sequential(
            (0): Conv2d(256, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): GroupNorm(16, 1024, eps=1e-05, affine=True)
          )
          (c_norm): GroupNorm(16, 256, eps=1e-05, affine=True)
        )
      )
      (1): DcUpConv(
        (main): Sequential(
          (0): ConvTranspose2d(256, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
          (1): GroupNorm(4, 128, eps=1e-05, affine=True)
          (2): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
    (4): ModuleList(
      (0): ConvLSTM(
        (model): NormConvLSTMCell(
          (ih_gates): Sequential(
            (0): Conv2d(128, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): GroupNorm(16, 512, eps=1e-05, affine=True)
          )
          (hh_gates): Sequential(
            (0): Conv2d(128, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): GroupNorm(16, 512, eps=1e-05, affine=True)
          )
          (c_norm): GroupNorm(16, 128, eps=1e-05, affine=True)
        )
      )
      (1): DcUpConv(
        (main): Sequential(
          (0): ConvTranspose2d(128, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
          (1): GroupNorm(4, 64, eps=1e-05, affine=True)
          (2): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
    (5): ModuleList(
      (0): ConvLSTM(
        (model): NormConvLSTMCell(
          (ih_gates): Sequential(
            (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): GroupNorm(16, 256, eps=1e-05, affine=True)
          )
          (hh_gates): Sequential(
            (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): GroupNorm(16, 256, eps=1e-05, affine=True)
          )
          (c_norm): GroupNorm(16, 64, eps=1e-05, affine=True)
        )
      )
      (1): DcConv(
        (main): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): GroupNorm(4, 64, eps=1e-05, affine=True)
          (2): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (2): TemporalConv2d(
        (model): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
  )
  (init_nets): ModuleList(
    (0): Sequential(
      (0): DcConv(
        (main): Sequential(
          (0): Conv2d(5120, 5120, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(4, 5120, eps=1e-05, affine=True)
          (2): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): TemporalConv2d(
        (model): Conv2d(5120, 1024, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): TemporalNorm2d(
        (model): GroupNorm(1, 1024, eps=1e-05, affine=True)
      )
    )
    (1): Sequential(
      (0): DcConv(
        (main): Sequential(
          (0): Conv2d(5120, 5120, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(4, 5120, eps=1e-05, affine=True)
          (2): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): TemporalConv2d(
        (model): Conv2d(5120, 1024, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): TemporalNorm2d(
        (model): GroupNorm(1, 1024, eps=1e-05, affine=True)
      )
    )
    (2): Sequential(
      (0): DcConv(
        (main): Sequential(
          (0): Conv2d(5120, 5120, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(4, 5120, eps=1e-05, affine=True)
          (2): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): TemporalConv2d(
        (model): Conv2d(5120, 1024, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): TemporalNorm2d(
        (model): GroupNorm(1, 1024, eps=1e-05, affine=True)
      )
    )
    (3): Sequential(
      (0): DcConv(
        (main): Sequential(
          (0): Conv2d(2560, 2560, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(4, 2560, eps=1e-05, affine=True)
          (2): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): TemporalConv2d(
        (model): Conv2d(2560, 512, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): TemporalNorm2d(
        (model): GroupNorm(1, 512, eps=1e-05, affine=True)
      )
    )
    (4): Sequential(
      (0): DcConv(
        (main): Sequential(
          (0): Conv2d(1280, 1280, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(4, 1280, eps=1e-05, affine=True)
          (2): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): TemporalConv2d(
        (model): Conv2d(1280, 256, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): TemporalNorm2d(
        (model): GroupNorm(1, 256, eps=1e-05, affine=True)
      )
    )
    (5): Sequential(
      (0): DcConv(
        (main): Sequential(
          (0): Conv2d(640, 640, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(4, 640, eps=1e-05, affine=True)
          (2): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): TemporalConv2d(
        (model): Conv2d(640, 128, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): TemporalNorm2d(
        (model): GroupNorm(1, 128, eps=1e-05, affine=True)
      )
    )
  )
  (prior_nets): ModuleList(
    (0): ModuleList(
      (0): TemporalConv2d(
        (model): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): TemporalNorm2d(
        (model): GroupNorm(1, 512, eps=1e-05, affine=True)
      )
      (2): ConvLSTM(
        (model): NormConvLSTMCell(
          (ih_gates): Sequential(
            (0): Conv2d(512, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): GroupNorm(16, 2048, eps=1e-05, affine=True)
          )
          (hh_gates): Sequential(
            (0): Conv2d(512, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): GroupNorm(16, 2048, eps=1e-05, affine=True)
          )
          (c_norm): GroupNorm(16, 512, eps=1e-05, affine=True)
        )
      )
      (3): TemporalConv2d(
        (model): Conv2d(512, 20, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): TemporalNorm2d(
        (model): GroupNorm(1, 20, eps=1e-05, affine=True)
      )
    )
  )
  (posterior_nets): ModuleList(
    (0): ModuleList(
      (0): TemporalConv2d(
        (model): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): TemporalNorm2d(
        (model): GroupNorm(1, 512, eps=1e-05, affine=True)
      )
      (2): ConvLSTM(
        (model): NormConvLSTMCell(
          (ih_gates): Sequential(
            (0): Conv2d(512, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): GroupNorm(16, 2048, eps=1e-05, affine=True)
          )
          (hh_gates): Sequential(
            (0): Conv2d(512, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): GroupNorm(16, 2048, eps=1e-05, affine=True)
          )
          (c_norm): GroupNorm(16, 512, eps=1e-05, affine=True)
        )
      )
      (3): TemporalConv2d(
        (model): Conv2d(512, 20, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): TemporalNorm2d(
        (model): GroupNorm(1, 20, eps=1e-05, affine=True)
      )
    )
  )
  (prior_init_nets): ModuleList(
    (0): Sequential(
      (0): DcConv(
        (main): Sequential(
          (0): Conv2d(5120, 5120, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(4, 5120, eps=1e-05, affine=True)
          (2): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): TemporalConv2d(
        (model): Conv2d(5120, 1024, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): TemporalNorm2d(
        (model): GroupNorm(1, 1024, eps=1e-05, affine=True)
      )
    )
  )
  (posterior_init_nets): ModuleList(
    (0): Sequential(
      (0): DcConv(
        (main): Sequential(
          (0): Conv2d(5120, 5120, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(4, 5120, eps=1e-05, affine=True)
          (2): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): TemporalConv2d(
        (model): Conv2d(5120, 1024, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): TemporalNorm2d(
        (model): GroupNorm(1, 1024, eps=1e-05, affine=True)
      )
    )
  )
)